{
  "message": "ValueError: Error when checking target: expected dense_1 to have 3 dimensions, but got array with shape (1, 1)",
  "traceback": ["py_call_impl(callable, dots$args, dots$keywords)", "(structure(function (...) \n{\n    dots <- py_resolve_dots(list(...))\n    result <- py_call_impl(callable, dots$args, dots$keywords)\n    if (convert) {\n        result <- py_to_r(result)\n        if (is.null(result)) \n            invisible(result)\n        else result\n    }\n    else {\n        result\n    }\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(generator = <environment>, steps_per_epoch = 200L, \n    epochs = 20L, verbose = 1L, callbacks = list(<environment>, \n        <environment>), validation_data = <environment>, validation_steps = 149L, \n    class_weight = NULL, max_queue_size = 10L, workers = 0L, \n    initial_epoch = 0L, use_multiprocessing = FALSE)", "do.call(func, args)", "call_generator_function(object$fit_generator, list(generator = generator, \n    steps_per_epoch = as.integer(steps_per_epoch), epochs = as.integer(epochs), \n    verbose = as.integer(verbose), callbacks = normalize_callbacks(view_metrics, \n        callbacks), validation_data = validation_data, validation_steps = as_nullable_integer(validation_steps), \n    class_weight = as_class_weight(class_weight), max_queue_size = as.integer(max_queue_size), \n    workers = as.integer(workers), initial_epoch = as.integer(initial_epoch)))", "fit_generator(., train_gen, steps_per_epoch = 200, epochs = 20, \n    validation_data = val_gen, validation_steps = val_steps)", "function_list[[k]](value)", "withVisible(function_list[[k]](value))", "freduce(value, `_function_list`)", "`_fseq`(`_lhs`)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "eval(quote(`_fseq`(`_lhs`)), env, env)", "withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))", "model %>% fit_generator(train_gen, steps_per_epoch = 200, epochs = 20, \n    validation_data = val_gen, validation_steps = val_steps)", "eval(ei, envir)", "eval(ei, envir)", "tfruns::training_run(\"src/03-B-RNN.R\")"]
}
